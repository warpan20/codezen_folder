
int knapsack(int* weights, int* values, int n, int maxWeight){
   //i gues we have to use some dynamic programming to solve this problem
    //what is the state we should consider
    int dp[2][maxWeight+1];//dp[0][] menas no item is there
    //and dp[][0] means no weight is left to be considered
    //first we populate the first row in which i= 0 so al values should be zero
    for(int w=0;w<=maxWeight;w++)
        dp[0][w] = 0;
    for(int i=1;i<=n;i++){
        for(int w=0;w<=maxWeight;w++ ){
            if( w == 0) //i==0 not required becouse filling of the row already been done
                dp[1][w] = 0;
            else if(w>= weights[i-1]) //w and i in dp staritng 1 but i in values staritng 0
                dp[1][w] = max(values[i-1] + dp[0][w - weights[i-1]], dp[0][w]);
            else
                dp[1][w] = dp[0][w];
                      
        }
    
    //we copy the 1 row of dp into 0 row and make the 
    //any way we only overwrite "all" the values in the 1 row so no need to worry about it
    for(int w=0;w<=maxWeight;w++)
        dp[0][w] = dp[1][w];
        
    }
        return dp[1][maxWeight];
   

}


// first implement the normal dp and then space optimize it.