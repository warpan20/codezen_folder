int solve(int n) {
    //if there is no fence then there is no way we can paint the fence
    if(n==0)
        return 0;
    //if there is only one fence then we can color it in 2 ways using 2 colors
    if(n==1)
        return 2;
    
    //dp[i][0] no of ways to paint 0 to i index fences using only 2 colors such that 
    //not more 2 adjucent fences have the same color and last 2 fences have the samecolor
    //dp[i][1] same as above but here last 2 fences have diff colors
    long long dp[n][2];
    
    //filling the dp array
    for(int i=0;i<n;i++)
    {
        dp[i][0] = 0;
        dp[i][1] = 1;
        
    }
    //setting the base conditions for upto i=1 i.e. 2 fences
    
    //both fences have same color
    dp[1][0] = 2;
    //both fences have diff clor
    //ways to color 1st fence = 2 and the second fence is 1 so no of ways = 1*2
    dp[1][1] = 2;
    
    //now we have to specify the recurrance relation
    //dp[i][0] = dp[i-1][1]; //we put the same color as the last element of dp[i-1] at the end
    //dp[i][0] = (2-1)*(dp[i-1][0] + dp[i-1][1]) for i>= 2 and i<n
    
    for(int i=2;i<n;i++)
    {
        dp[i][0] = dp[i-1][1]%1000000007;
        dp[i][1] = ((2-1)*(dp[i-1][0] + dp[i-1][1]))%1000000007;
        
    }
    
    int ans = (dp[n-1][0] + dp[n-1][1])%1000000007;
    
    
    return ans; //when last 2 are same + last 2 are diff
    
    
    
    
    
    
}